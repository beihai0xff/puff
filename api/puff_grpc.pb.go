// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PuffClient is the client API for Puff service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PuffClient interface {
	// Sends a get lock request
	Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockReply, error)
	// Sends a unlock request
	Unlock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*UnlockReply, error)
}

type puffClient struct {
	cc grpc.ClientConnInterface
}

func NewPuffClient(cc grpc.ClientConnInterface) PuffClient {
	return &puffClient{cc}
}

func (c *puffClient) Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockReply, error) {
	out := new(LockReply)
	err := c.cc.Invoke(ctx, "/puff.puff/Lock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puffClient) Unlock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*UnlockReply, error) {
	out := new(UnlockReply)
	err := c.cc.Invoke(ctx, "/puff.puff/Unlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PuffServer is the server API for Puff service.
// All implementations must embed UnimplementedPuffServer
// for forward compatibility
type PuffServer interface {
	// Sends a get lock request
	Lock(context.Context, *LockRequest) (*LockReply, error)
	// Sends a unlock request
	Unlock(context.Context, *LockRequest) (*UnlockReply, error)
	mustEmbedUnimplementedPuffServer()
}

// UnimplementedPuffServer must be embedded to have forward compatible implementations.
type UnimplementedPuffServer struct {
}

func (UnimplementedPuffServer) Lock(context.Context, *LockRequest) (*LockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (UnimplementedPuffServer) Unlock(context.Context, *LockRequest) (*UnlockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlock not implemented")
}
func (UnimplementedPuffServer) mustEmbedUnimplementedPuffServer() {}

// UnsafePuffServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PuffServer will
// result in compilation errors.
type UnsafePuffServer interface {
	mustEmbedUnimplementedPuffServer()
}

func RegisterPuffServer(s grpc.ServiceRegistrar, srv PuffServer) {
	s.RegisterService(&Puff_ServiceDesc, srv)
}

func _Puff_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuffServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puff.puff/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuffServer).Lock(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puff_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuffServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puff.puff/Unlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuffServer).Unlock(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Puff_ServiceDesc is the grpc.ServiceDesc for Puff service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Puff_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "puff.puff",
	HandlerType: (*PuffServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Lock",
			Handler:    _Puff_Lock_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _Puff_Unlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "puff.proto",
}
